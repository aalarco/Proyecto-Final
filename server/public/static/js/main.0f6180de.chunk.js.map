{"version":3,"sources":["service/Auth.service.js","components/ui/Navbar.js","service/Movie.service.js","service/Api.service.js","components/movies/Movie-card.js","components/movies/Movies-list.js","components/pages/Index.js","components/auth/Signup.js","components/auth/Login.js","service/List.service.js","components/lists/New-list.js","components/movies/Movie-details.js","components/lists/All-lists.js","App.js","serviceWorker.js","index.js"],"names":["Services","signup","username","password","_service","post","login","logout","loggedin","get","this","axios","create","baseURL","withCredentials","Navigation","props","logoutUser","then","x","setUser","catch","err","console","log","Service","saludo","loggedInUser","Navbar","className","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","as","to","Text","onClick","src","alt","Component","getAllMovies","getOneMovie","id","require","APIHandler","getMovieByID","getMovieCast","MovieCard","componentDidMount","apiInfo","_apiService","state","TMDB","res","setState","poster","data","poster_path","ApiService","_id","Title","imgSrc","Row","Col","md","AllMovies","updateMoviesList","_movieService","allMoviesFromDB","movies","MovieService","Container","map","movie","key","Index","SignupForm","handleSubmit","e","preventDefault","theNewUser","history","push","handleInputChange","target","name","value","Form","onSubmit","Group","Label","Control","type","onChange","Button","LoginForm","user","theLoggedUser","handleToastOpen","response","message","handleToastClose","showToast","toastText","text","Toast","onClose","show","delay","autohide","style","position","right","bottom","minWidth","Header","Body","createList","movielist","addMovieToList","getAllLists","getAllListsFromUser","userId","NewList","listNew","list","_ServiceList","closeModalWindow","ServiceList","listName","creator","idUser","idMovie","size","disabled","disabledButton","MovieDetails","movieId","match","params","theMovie","_listService","handleShowCreate","showModalWindowCreate","handleCloseCreate","handleAddToExistentList","listId","dataset","ListService","showModalWindowAdd","movieIdParams","DropdownButton","title","Dropdown","Item","data-value","lists","Genre1","SubGenre1","SubGenre2","Theme1","Theme2","Theme3","Theme4","Theme5","Mood1","Stream1","Modal","onHide","closeButton","AllLists","updateAllLists","allListsFromDB","App","setTheUser","fetchUser","theLoggedInUserFromTheServer","AuthService","exact","path","component","render","Signup","Login","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f6180de.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default class Services {\n\n    constructor() {\n        this._service = axios.create({\n            baseURL: 'http://localhost:5000/api/auth',\n            withCredentials: true   // RUTAS PERSISTENTES\n        })\n    }\n\n    signup = (username, password) => this._service.post('/signup', { username, password })\n    login = (username, password) => this._service.post('/login', { username, password })\n    logout = () => this._service.post('/logout')\n    loggedin = () => this._service.get('/loggedin')\n}","import React, { Component } from 'react'\nimport { Navbar, Nav } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport Service from '../../service/Auth.service'\n\nclass Navigation extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n\n    }\n\n    logoutUser = () => {\n        this._service.logout()\n            .then(x => this.props.setUser(false))\n            .catch(err => console.log(err))\n    }\n\n    render() {\n\n        const saludo = this.props.loggedInUser ? this.props.loggedInUser.username : 'invitado'\n\n        return (\n\n            this.props.loggedInUser ?\n\n                <Navbar className=\"fixed-top\" bg=\"dark\" variant=\"dark\" expand=\"md\">\n                    <Navbar.Brand>Moviestorm</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link as=\"li\"><Link to=\"/\">Inicio</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/lists\">Listas</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/profile\">Perfil</Link></Nav.Link>\n                        </Nav>\n                        <Nav className=\"ml-auto\">\n                            <Navbar.Text>Bienvenid@ {saludo}</Navbar.Text>\n                            <Nav.Link as=\"li\" onClick={this.logoutUser}>Logout</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                :\n\n                <Navbar className=\"fixed-top\" bg=\"dark\" variant=\"dark\" expand=\"md\">\n                    <Navbar.Brand><img src=\"../../public/images/Logo-blanco.png\" alt=\"Logo\" /></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link as=\"li\"><Link to=\"/\">Inicio</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/movies\">Listas</Link></Nav.Link>\n                        </Nav>\n                        <Nav className=\"ml-auto\">\n                            {/* <Navbar.Text>Bienvenid@ {saludo}</Navbar.Text> */}\n                            <Nav.Link as=\"li\"><Link to=\"/signup\">Registro</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/login\">Login</Link></Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n        )\n    }\n}\n\nexport default Navigation","import axios from 'axios'\n\nexport default class Services {\n\n    constructor() {\n        this._service = axios.create({\n            baseURL: 'http://localhost:5000/api/movies',\n            withCredentials: true   // RUTAS PERSISTENTES\n        })\n    }\n\n    getAllMovies = () => this._service.get('/getAllMovies')\n    getOneMovie = id => this._service.get(`/${id}`)\n    \n    // getOneMovieByTMDB = x => this._service.get(`/${x}`)\n    // postMovie = movie => this._service.post('/new', movie)\n}","const axios = require('axios')\n\n\nexport default class APIHandler {\n\n    constructor() {\n        this._service = axios.create({\n            baseURL: `https://api.themoviedb.org/3`\n        })\n    }\n\n\n\n    getMovieByID = (x) => this._service.get(`/movie/${x}?api_key=4a61e4d31818d43ef0d9ce519905732b`)\n    getMovieCast = (x) => this._service.get(`/credits/${x}?api_key=4a61e4d31818d43ef0d9ce519905732b`)\n    \n\n}\n\n\n","import React, { Component } from 'react'\nimport { Col, Row } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\n\n/* API Services */\n\nimport ApiService from '../../service/Api.service'\n \nclass MovieCard extends Component{\n\n    constructor(props){\n        super(props)\n        this._apiService = new ApiService()\n        this.state = {\n            id: this.props._id,\n            TMDB: this.props.TMDB,\n            Title: this.props.Title,\n            poster: null\n        }\n    }\n\n    \n    componentDidMount = () => {\n        this.apiInfo()\n    }\n\n    apiInfo = () => {\n        this._apiService.getMovieByID(this.state.TMDB)\n            .then(res => {\n                this.setState({ poster: res.data.poster_path })\n                //console.log(res.data.poster_path)   --------------------------\n            })  \n            .catch(err => console.log(err))\n    }\n\n\n    render() {\n\n        const imgSrc = `http://image.tmdb.org/t/p/w185/${this.state.poster}`\n         return (\n             <>\n        <Row>\n        <Col className=\"movie-card\" md={4}>\n             <Link to={`movies/${this.state.id}`}><img src={imgSrc} alt={this.state.Title}></img></Link>\n        </Col >\n        </Row>\n        </>\n    )\n    }\n}\n\n\n\n\nexport default MovieCard\n\n\n","import React, { Component } from 'react'\nimport MovieService from '../../service/Movie.service'\nimport { Container, Row } from 'react-bootstrap'\n\nimport MovieCard from './Movie-card'\n\nclass AllMovies extends Component {\n\n    constructor(props) {\n        super(props)\n        this._movieService = new MovieService()\n        this.state = {\n            movies: []\n        }\n\n    }\n\n    componentDidMount = () => this.updateMoviesList()\n\n    updateMoviesList = () => {\n        this._movieService.getAllMovies()\n            .then(allMoviesFromDB => this.setState({ movies: allMoviesFromDB.data }))\n            .catch(err => console.log(\"Error\", err))\n    }\n\n    render() {\n        return (\n\n\n            <section>\n\n                <Container>\n\n                    <h1>Movies</h1>\n\n                    <Row>\n                        {this.state.movies.map(movie => (<MovieCard key={movie._id} {...movie} />))}\n                    </Row>\n                </Container>\n\n            </section>\n\n        )\n    }\n\n\n}\n\nexport default AllMovies","import React from 'react'\nimport { Container } from 'react-bootstrap'\n\nimport MoviesList from '../movies/Movies-list'\n\nconst Index = () => {\n\n    return (\n        <Container>\n            <section>\n                <h1>Moviestorm!</h1>\n                <p>Encuentra la peli perfecta</p>\n            </section>\n            <MoviesList />\n\n        </Container>\n    )\n}\n\nexport default Index","import React, { Component } from 'react'\nimport { Button, Form, Container } from 'react-bootstrap'\n\nimport Service from '../../service/Auth.service'\n\n\nclass SignupForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n        this.state = { username: '', password: '' }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        const { username, password } = this.state\n        this._service.signup(username, password)\n            .then(theNewUser => {\n                console.log(theNewUser)\n\n                this.setState({ username: '', password: '' })\n                this.props.setUser(theNewUser)\n                this.props.history.push('/')            // REDIRECCIONAMIENTO\n            })\n            .catch(err => console.log(err))\n    }\n\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({ [name]: value })\n    }\n\n    render() {\n        return (\n            <Container>\n\n                <h1>Registro</h1>\n\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Usuario</Form.Label>\n                        <Form.Control type=\"text\" name=\"username\" onChange={this.handleInputChange} value={this.state.username} />\n                    </Form.Group>\n                    {/* <Form.Group>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type=\"text\" name=\"email\" onChange={this.handleInputChange} value={this.state.email} />\n                    </Form.Group> */}\n                    <Form.Group>\n                        <Form.Label>Contraseña</Form.Label>\n                        <Form.Control type=\"password\" name=\"password\" onChange={this.handleInputChange} value={this.state.password} />\n                    </Form.Group>\n                    <Button variant=\"dark\" type=\"submit\">Registrarme</Button>\n                </Form>\n\n            </Container>\n        )\n    }\n}\n\n\nexport default SignupForm","import React, { Component } from 'react'\nimport { Button, Form, Container, Toast } from 'react-bootstrap'\n\nimport Service from '../../service/Auth.service'\n\nclass LoginForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n        this.state = {\n            showToast: false,\n            toastText: '',\n            user: { username: '', password: '' }\n        }\n    }\n\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({\n            user: { ...this.state.user, [name]: value }\n        })\n    }\n\n\n    handleSubmit = e => {\n        e.preventDefault()\n        const { username, password } = this.state.user\n        this._service.login(username, password)\n            .then(theLoggedUser => {\n                this.props.setUser(theLoggedUser.data)\n                this.setState({ username: '', password: '' })\n                this.props.history.push('/')            // REDIRECCIONAMIENTO\n            })\n            .catch(err => {\n                this.handleToastOpen(err.response.data.message)\n            })\n    }\n\n    handleToastClose = () => this.setState({ showToast: false, toastText: '' })\n    handleToastOpen = text => this.setState({ showToast: true, toastText: text })\n\n\n    render() {\n        return (\n            <Container>\n\n                <h1>Iniciar sesión</h1>\n\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Usuario</Form.Label>\n                        <Form.Control type=\"text\" name=\"username\" onChange={this.handleInputChange} value={this.state.username} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Contraseña</Form.Label>\n                        <Form.Control type=\"password\" name=\"password\" onChange={this.handleInputChange} value={this.state.password} />\n                    </Form.Group>\n                    <Button variant=\"dark\" type=\"submit\">Iniciar sesión</Button>\n                </Form>\n\n                <Toast\n                    onClose={this.handleToastClose}\n                    show={this.state.showToast}\n                    delay={3000}\n                    autohide\n                    style={{\n                        position: 'fixed',\n                        right: '10px',\n                        bottom: '10px',\n                        minWidth: '250px'\n                    }}>\n                    <Toast.Header>\n                        <strong className=\"mr-auto\">Error</strong>\n                        <small>Session manager</small>\n                    </Toast.Header>\n                    <Toast.Body>{this.state.toastText}</Toast.Body>\n                </Toast>\n\n            </Container >\n        )\n    }\n}\n\n\nexport default LoginForm","import axios from 'axios'\n\nexport default class Services {\n\n    constructor() {\n        this._service = axios.create({\n            baseURL: 'http://localhost:5000/api/lists',\n            withCredentials: true   // RUTAS PERSISTENTES\n        })\n    }\n\n    createList = (movielist) => this._service.post('/newList', { movielist })\n    addMovieToList = (addMovieToList) => this._service.post('/addMovieToList', { addMovieToList })\n    getAllLists = () => this._service.get('/getAllLists')\n    getAllListsFromUser = (userId) => this._service.get(`/getAllListsFromUser/${userId}`)\n}","import React, { Component } from 'react'\nimport { Form, Button } from 'react-bootstrap'\n\nimport ServiceList from '../../service/List.service'\n\nclass NewList extends Component {\n\n    constructor(props) {\n        super(props)\n        this._ServiceList = new ServiceList()\n        this.state = {\n            list:{\n                listName:\"\",\n                creator: this.props.idUser,\n                movies: [this.props.idMovie]\n            }\n        }\n    }\n\n    \n\n    handleSubmit = e => {\n        e.preventDefault()\n\n        const listNew = this.state.list\n        this._ServiceList.createList(listNew)\n            .then(x => {\n                ///console.log(\"respuesta back ok\")\n                this.props.closeModalWindow()\n            })\n            .catch(err => console.log(err))\n    }\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({\n            list: { ...this.state.list, [name]: value }\n        })\n    }\n\n    render() {\n        ///console.log(\"soy el estado del newlist\", this.state.list)\n        return (\n            <>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Create a new list:</Form.Label>\n                        <Form.Control type=\"text\" name=\"listName\" id=\"listName\" onChange={this.handleInputChange} value={this.state.list.listName} />\n                    </Form.Group>\n                    <Button variant=\"dark\" size=\"sm\" type=\"submit\" disabled={this.state.disabledButton}> Create and Add</Button>\n                </Form>\n               \n\n\n            </>\n\n\n\n        )\n    }\n}\n\n\n\nexport default NewList","import React, { Component } from 'react'\nimport { Container, Row, Col, Button, Modal, Dropdown, DropdownButton } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\n/* API Services */\nimport MovieService from '../../service/Movie.service'\nimport ApiService from '../../service/Api.service'\nimport ListService from '../../service/List.service'\n\n/* Crear lista */\nimport NewList from '../lists/New-list'\n\nclass MovieDetails extends Component {\n\n    constructor(props) {\n        super(props)\n        this._movieService = new MovieService()\n        this._apiService = new ApiService()\n        this._listService = new ListService()\n        this.state = {\n            movie: null,\n            poster: null,\n            ////\n            showModalWindowCreate: false,\n            showModalWindowAdd: false,\n            ////\n            loggedInUser: null,\n            list: {},\n            user: {}\n        }\n    }\n\n\n    componentDidMount = () => {\n        console.log('el usuarioi es::::: ',this.props.loggedInUser)\n\n        const movieId = this.props.match.params.id\n\n        this._movieService.getOneMovie(movieId)\n            .then(theMovie => {\n                this.setState({ movie: theMovie.data }, () => {\n                    this.apiInfo()\n                })\n            })\n            .then(()=> this._listService.getAllListsFromUser(this.props.loggedInUser._id))\n            .catch(err => console.log(err))\n    }\n\n    apiInfo = () => {\n        this._apiService.getMovieByID(this.state.movie.TMDB)\n            .then(res => {\n                this.setState({ poster: res.data.poster_path })\n            })\n            .catch(err => console.log(err))\n    }\n\n    // movieInfo = () => {\n    //     this._movieService.getMovieByID(this.state._id)\n    //         .then(res => {\n\n    //         })\n    // }\n\n    ///// Create list\n    handleShowCreate = () => this.setState({ showModalWindowCreate: true })\n    handleCloseCreate = () => this.setState({ showModalWindowCreate: false })\n\n    // /// Add list\n    // handleShowAdd = () => this.setState({ showModalWindowAdd: true })\n    // handleCloseAdd = () => this.setState({ showModalWindowAdd: false })\n\n    /// Add to existent list\n    handleAddToExistentList = e => {\n        const listId = e.target.dataset.value\n        console.log(listId)\n\n    }\n\n    render() {\n\n        const imgSrc = `http://image.tmdb.org/t/p/w185/${this.state.poster}`\n        const movieIdParams = this.props.match.params.id\n\n        return this.state.movie ? (\n            <Container className=\"movie-details\">\n                <section>\n                    <Row>\n                        <Col>\n                            <img src={imgSrc} alt=\"Movie poster\"></img>\n                            {/*<Link to={this.state.movie.Trailer_url} className=\"btn btn-dark\">Ver trailer</Link>*/}\n                            {\n                                this.props.loggedInUser &&\n                                <Button variant=\"dark\" onClick={this.handleShowCreate}>Create and add to list</Button>  ///// Añadir  this.props.loggedInUser &&  al principio del botón\n                            }\n\n\n                            {\n                                //<AddToList />                                 \n                                this.props.loggedInUser &&\n                                <DropdownButton variant=\"dark\" id=\"dropdown-basic-button\" title=\"Add to list\">\n                                    <Dropdown.Item onClick={this.handleAddToExistentList} data-value={this.state.user.lists}>Lista 1</Dropdown.Item>\n                                </DropdownButton>\n                            }\n\n                        </Col>\n\n                        <Col md={6}>\n                            <h1>{this.state.movie.Title}</h1>\n                            <p><strong>Genres:</strong> {this.state.movie.Genre1}</p>\n                            <p><strong>SubGenre:</strong> {this.state.movie.SubGenre1}, {this.state.movie.SubGenre2}</p>\n                            <p><strong>Theme:</strong> {this.state.movie.Theme1}, {this.state.movie.Theme2}, {this.state.movie.Theme3}, {this.state.movie.Theme4}, {this.state.movie.Theme5}, </p>\n                            <p><strong>Mood:</strong> {this.state.movie.Mood1}</p>\n                            <p><strong>Stream:</strong> {this.state.movie.Stream1}</p>\n                            <Link to=\"/\" className=\"btn btn-dark\">Volver</Link>\n                        </Col>\n\n                    </Row>\n\n                    <Modal show={this.state.showModalWindowCreate} onHide={this.handleCloseCreate}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Create and add to list</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <NewList closeModalWindow={this.handleCloseCreate} idMovie={movieIdParams} />\n                        </Modal.Body>\n                    </Modal>\n\n                </section>\n            </Container>\n\n\n        ) : \"Waiting for the movie\"\n    }\n}\n\nexport default MovieDetails","import React, { Component } from 'react'\nimport ListService from '../../service/List.service'\n//import { Container, Row } from 'react-bootstrap'\n\n//import MovieCard from './Movie-card'\n\nclass AllLists extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new ListService()\n        this.state = {\n            lists: []\n        }\n\n    }\n\n    componentDidMount = () => this.updateAllLists()\n\n    updateAllLists = () => {\n        this._service.getAllLists()\n            .then(allListsFromDB => this.setState({ lists: allListsFromDB.data }))\n            .catch(err => console.log(\"Error\", err))\n    }\n\n    render() {\n        return (\n\n            <h1>Pruebaaaaaaa\n                \n            </h1>\n            // <section>\n\n            //     <Container>\n\n            //         <h1>Movies</h1>\n\n            //         <Row>\n            //             {this.state.lists.map(movie => (<MovieCard key={movie._id} {...movie} />))}\n            //         </Row>\n            //     </Container>\n\n            // </section>\n\n        )\n    }\n\n\n}\n\nexport default AllLists","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\n// import { Container, } from 'react-bootstrap'\n\n/* style */\nimport './App.css'\n\n\n/* services */\nimport AuthService from './service/Auth.service'\n\n/* UI */\nimport Navbar from './components/ui/Navbar'\n\n/* Pages */\nimport Index from './components/pages/Index'\n\n\n/* Auth */\nimport Signup from './components/auth/Signup'\nimport Login from './components/auth/Login'\n\n/* Movies */\n\nimport AllMovies from './components/movies/Movies-list'\nimport MovieDetails from './components/movies/Movie-details'\n\n/* Lists */\n\nimport AllLists from './components/lists/All-lists'\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { loggedInUser: null }\n    this._service = new AuthService()\n  }\n\n  setTheUser = user => {\n    this.setState({ loggedInUser: user })\n  }\n\n  fetchUser = () => {\n    if (this.state.loggedInUser === null) {\n      this._service.loggedin()\n        .then(theLoggedInUserFromTheServer => this.setState({ loggedInUser: theLoggedInUserFromTheServer.data }))\n        .catch(err => {\n          this.setState({ loggedInUser: false })\n          console.log('Ha habido un error en fecthUser()', { err })\n        })\n    }\n  }\n\n  render() {\n\n    this.fetchUser()\n\n    return (\n      <>\n        <Navbar loggedInUser={this.state.loggedInUser} setUser={this.setTheUser} />\n        {/* <Navbar /> */}\n\n        <Switch className=\"body\">\n          <Route exact path=\"/\" component={Index} />\n\n          <Route exact path=\"/movies\" render={() => <AllMovies loggedInUser={this.state.loggedInUser} />} />\n          <Route path=\"/movies/:id\" render={match => <MovieDetails loggedInUser={this.state.loggedInUser} {...match} />} />\n          <Route path=\"/lists\" component={AllLists} /> \n\n          <Route path=\"/signup\" render={match => <Signup setUser={this.setTheUser} {...match} />} />\n          <Route path=\"/login\" render={match => <Login setUser={this.setTheUser} {...match} />} />\n\n\n          {/* <Route path=\"/profile\" render={() =>\n            this.state.loggedInUser ? <Profile loggedInUser={this.state.loggedInUser} /> : <Redirect to=\"/\" />\n          } /> */}\n        </Switch>\n\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css'\n\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}